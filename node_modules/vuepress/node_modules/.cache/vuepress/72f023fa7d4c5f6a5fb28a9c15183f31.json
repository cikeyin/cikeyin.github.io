{"remainingRequest":"D:\\项目\\个人网站\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!D:\\项目\\个人网站\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js??ref--1-2!D:\\项目\\个人网站\\docs\\blog\\eventLoop.md?vue&type=template&id=0b6fca2c&","dependencies":[{"path":"D:\\项目\\个人网站\\docs\\blog\\eventLoop.md","mtime":1552475685607},{"path":"D:\\项目\\个人网站\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\项目\\个人网站\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\项目\\个人网站\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\项目\\个人网站\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\项目\\个人网站\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["\n<div class=\"content\"><h3 id=\"javascript事件循环机制（event-loop）\"><a class=\"header-anchor\" href=\"#javascript事件循环机制（event-loop）\" aria-hidden=\"true\">#</a> JavaScript事件循环机制（Event Loop）</h3>\n<h4 id=\"一、为什么javascript是单线程？\"><a class=\"header-anchor\" href=\"#一、为什么javascript是单线程？\" aria-hidden=\"true\">#</a> 一、为什么JavaScript是单线程？</h4>\n<p>JavaScript语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。 那么，为什么JavaScript不能有多个线程呢？效率！</p>\n<p>JavaScript的单线程，与它的用途有关。作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定JavaScript同时有两个线程，一个线程在某个DOM节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？</p>\n<p>所以，为了避免复杂性，从一诞生，JavaScript就是单线程，这已经成了这门语言的核心特征，将来也不会改变。</p>\n<p>为了利用多核CPU的计算能力，HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM。所以，这个新标准并没有改变JavaScript单线程的本质。</p>\n<h4 id=\"二、执行栈与任务队列\"><a class=\"header-anchor\" href=\"#二、执行栈与任务队列\" aria-hidden=\"true\">#</a> 二、执行栈与任务队列</h4>\n<p>所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；异步任务指的是，不进入主线程、而进入&quot;任务队列&quot;（task queue）的任务，只有&quot;任务队列&quot;通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。</p>\n<p>具体来说，异步执行的运行机制如下。</p>\n<ol>\n<li>\n<p>所有同步任务都在主线程上执行，形成一个 ** 执行栈 ** （execution context stack）。</p>\n</li>\n<li>\n<p>主线程之外，还存在一个 ** 任务队列 ** （task queue）。只要异步任务有了运行结果，就在&quot;任务队列&quot;之中放置一个事件。</p>\n</li>\n<li>\n<p>一旦&quot;执行栈&quot;中的所有同步任务执行完毕，系统就会读取&quot;任务队列&quot;，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。</p>\n</li>\n<li>\n<p>主线程不断重复上面的第三步。</p>\n</li>\n</ol>\n<p>js引擎遇到一个异步事件后并不会一直等待其返回结果，而是会将这个事件挂起，继续执行执行栈中的其他任务。当一个异步事件返回结果后，js会将这个事件加入与当前执行栈不同的另一个队列，我们称之为事件队列。被放入事件队列不会立刻执行其回调，而是等待当前执行栈中的所有任务都执行完毕， 主线程处于闲置状态时，主线程会去查找事件队列是否有任务。如果有，那么主线程会从中取出排在第一位的事件，并把这个事件对应的回调放入执行栈中，然后执行其中的同步代码...，如此反复，这样就形成了一个无限的循环。这就是这个过程被称为“事件循环（Event Loop）”的原因。<br>\n<div align=\"center\">\n<img src=\"https://ws3.sinaimg.cn/large/b9236829gy1g11cl6k56nj20gp0entaa.jpg\" alt=\"image\"><br>\n</div></p>\n<p>图中的stack表示我们所说的执行栈，web apis则是代表一些异步事件，而callback queue即事件队列。</p>\n<h4 id=\"三、宏任务（macrotasks）与微任务（microtasks）\"><a class=\"header-anchor\" href=\"#三、宏任务（macrotasks）与微任务（microtasks）\" aria-hidden=\"true\">#</a> 三、宏任务（macrotasks）与微任务（microtasks）</h4>\n<p>异步任务被分为两类：微任务（microtasks）和宏任务（macrotasks）,在最新标准中，它们被分别称为task与jobs。</p>\n<p>macro-task大概包括：script(整体代码), setTimeout, setInterval, setImmediate, I/O, UI rendering。</p>\n<p>micro-task大概包括: process.nextTick, Promise, Object.observe(已废弃), MutationObserver(html5新特性)。</p>\n<p>事件循环的顺序，决定了JavaScript代码的执行顺序。它从script(整体代码)开始第一次循环。之后全局上下文进入执行栈，直到执行栈清空(只剩全局)，然后执行所有的micro-task。当所有可执行的micro-task执行完毕之后。循环再次从macro-task开始，找到其中一个任务队列执行完毕，然后再执行所有的micro-task，这样一直循环下去 。</p>\n<h4 id=\"四、题目分析\"><a class=\"header-anchor\" href=\"#四、题目分析\" aria-hidden=\"true\">#</a> 四、题目分析</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> obj<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>\n    func<span class=\"token punctuation\">:</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'E'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<p>答案：<br>\nC<br>\nE<br>\nD<br>\nA<br>\nB</p>\n<h4 id=\"五、vue-nexttick\"><a class=\"header-anchor\" href=\"#五、vue-nexttick\" aria-hidden=\"true\">#</a> 五、vue.$nexttick</h4>\n<p>因为 DOM 至少会在当前线程里面的代码全部执行完毕再更新。所以不可能做到在修改数据后并且 DOM 更新后再执行，要保证在 DOM 更新以后再执行某一块代码，就必须把这块代码放到下一次事件循环里面，比如 setTimeout(fn, 0)，这样 DOM 更新后，就会立即执行这块代码。</p>\n<p>Vue 的 nextTick方法，从 <a href=\"https://github.com/vuejs/vue/blob/dev/src/core/util/next-tick.js\" target=\"_blank\" rel=\"noopener noreferrer\">源码<OutboundLink/></a>不难发现，Vue 在内部尝试对异步队列使用原生的setImmediate、Promise.then和MessageChannel，如果当前执行环境不支持，就采用setTimeout(fn, 0)代替。</p>\n<blockquote>\n<p>参考<br>\n<a href=\"http://www.ruanyifeng.com/blog/2014/10/event-loop.html\" target=\"_blank\" rel=\"noopener noreferrer\">http://www.ruanyifeng.com/blog/2014/10/event-loop.html<OutboundLink/></a>\n<a href=\"https://juejin.im/post/5bac87b6f265da0a906f78d8\" target=\"_blank\" rel=\"noopener noreferrer\">https://juejin.im/post/5bac87b6f265da0a906f78d8<OutboundLink/></a>\n<a href=\"https://juejin.im/entry/58d3f7a944d9040068600c49\" target=\"_blank\" rel=\"noopener noreferrer\">https://juejin.im/entry/58d3f7a944d9040068600c49<OutboundLink/></a>\n<a href=\"https://zhuanlan.zhihu.com/p/33058983\" target=\"_blank\" rel=\"noopener noreferrer\">https://zhuanlan.zhihu.com/p/33058983<OutboundLink/></a></p>\n</blockquote>\n</div>\n",null]}